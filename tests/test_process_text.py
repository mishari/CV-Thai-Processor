from re import split
from process_text import *
import pytest
import pathlib

this_file_path = str(pathlib.Path(__file__).parent.absolute())

@pytest.fixture
def krisdika_txt():
    return open(this_file_path + "/data/krisdika.txt").read()

def test_remove_symbols():
    assert remove_symbols("‚óè ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ") == " ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ"
    assert remove_symbols("‡∏™‡∏ß‡∏±‡∏™*‡∏î‡∏µ‡πÇ‡∏•‡∏Å") == "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡πÇ‡∏•‡∏Å"
    assert remove_symbols("‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‚Ä¢‡πÇ‡∏•‡∏Å") == "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡πÇ‡∏•‡∏Å"

def test_remove_number_dot_space():
    assert remove_number_dot_space("1. ‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ") == "‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ"

def test_remove_english_in_brackets():
    assert remove_english_in_brackets("‡πÄ‡∏Æ‡∏•‡πÇ‡∏´‡∏• (Hello) ‡πÄ‡∏ß‡∏¥‡∏£‡∏•‡πå‡∏î") == "‡πÄ‡∏Æ‡∏•‡πÇ‡∏´‡∏• ‡πÄ‡∏ß‡∏¥‡∏£‡∏•‡πå‡∏î"

def test_normalize_text():
    assert normalize_text("‡∏ä‡πâ‡∏µ") == "‡∏ä‡∏µ‡πâ"

def test_split_sentence():
    assert split_sentence("‡∏â‡∏±‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô ‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô‡∏â‡∏±‡∏ô‡∏°‡∏±‡∏ô‡∏¢‡∏≤‡∏Å") == ['‡∏â‡∏±‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô', "‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô‡∏â‡∏±‡∏ô‡∏°‡∏±‡∏ô‡∏¢‡∏≤‡∏Å"]

def test_newlines_into_spaces():
    assert split_sentence("‡∏â‡∏±‡∏ô‡∏ó‡∏≥\n‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô\n‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏Å") == ["‡∏â‡∏±‡∏ô‡∏ó‡∏≥ ‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô ‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏Å"]

def test_convert_roman_number_to_word():
    assert number_to_word("‡∏û.‡∏®. 2497") == "‡∏û.‡∏®.‡∏™‡∏≠‡∏á‡∏û‡∏±‡∏ô‡∏™‡∏µ‡πà‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡πâ‡∏≤‡∏™‡∏¥‡∏ö‡πÄ‡∏à‡πá‡∏î"

def test_convert_thai_number_to_word():
    assert number_to_word("‡∏û.‡∏®. ‡πí‡πî‡πô‡πó") == "‡∏û.‡∏®.‡∏™‡∏≠‡∏á‡∏û‡∏±‡∏ô‡∏™‡∏µ‡πà‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡πâ‡∏≤‡∏™‡∏¥‡∏ö‡πÄ‡∏à‡πá‡∏î"

def test_convert_thai_number_to_word_matches_entire_string():
    assert number_to_word("‡∏û.‡∏®. ‡πí‡πî‡πô‡πó.") == "‡∏û.‡∏®.‡∏™‡∏≠‡∏á‡∏û‡∏±‡∏ô‡∏™‡∏µ‡πà‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡πâ‡∏≤‡∏™‡∏¥‡∏ö‡πÄ‡∏à‡πá‡∏î."

def test_convert_thai_number_to_word_no_numbers():
    assert number_to_word("‡∏â‡∏±‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô") == "‡∏â‡∏±‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô"

def test_convert_multiple_numbers_to_words():
    assert number_to_word("‡∏°‡∏≤‡∏ï‡∏£‡∏≤ ‡πò‡πî[‡πî‡πî]") == "‡∏°‡∏≤‡∏ï‡∏£‡∏≤‡πÅ‡∏õ‡∏î‡∏™‡∏¥‡∏ö‡∏™‡∏µ‡πà[‡∏™‡∏µ‡πà‡∏™‡∏¥‡∏ö‡∏™‡∏µ‡πà]"

def test_remove_space_before_after_number():
    input = "‡πÑ‡∏õ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô 20 ‡∏ß‡∏±‡∏ô"
    output = "‡πÑ‡∏õ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏¢‡∏µ‡πà‡∏™‡∏¥‡∏ö‡∏ß‡∏±‡∏ô"
    assert number_to_word(input) == output
    assert split_sentence(input) == [output]

def test_baht_to_words():
    assert split_sentence("20 ‡∏ö‡∏≤‡∏ó") == ["‡∏¢‡∏µ‡πà‡∏™‡∏¥‡∏ö‡∏ö‡∏≤‡∏ó"]

def test_expand_maiyamok():
    assert expand_maiyamok("‡∏ö‡∏±‡∏ç‡∏ç‡∏±‡∏ï‡∏¥‡∏ï‡πà‡∏≤‡∏á ‡πÜ") == "‡∏ö‡∏±‡∏ç‡∏ç‡∏±‡∏ï‡∏¥‡∏ï‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≤‡∏á"

def test_expand_maiyamok_without_maiyamok():
    assert expand_maiyamok("‡∏ö‡∏±‡∏ç‡∏ç‡∏±‡∏ï‡∏¥‡∏ï‡πà‡∏≤‡∏á") == "‡∏ö‡∏±‡∏ç‡∏ç‡∏±‡∏ï‡∏¥‡∏ï‡πà‡∏≤‡∏á"

def test_expand_multiple_maiyamoks():
    assert expand_maiyamok("‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ô‡∏≤‡πÜ") == "‡∏ï‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≤‡∏á ‡∏ô‡∏≤‡∏ô‡∏≤"

def test_split_sentence_expand_maiyamok():
    assert expand_maiyamok("‡∏ö‡∏±‡∏ç‡∏ç‡∏±‡∏ï‡∏¥‡∏ï‡πà‡∏≤‡∏á ‡πÜ") == "‡∏ö‡∏±‡∏ç‡∏ç‡∏±‡∏ï‡∏¥‡∏ï‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≤‡∏á"

def test_strip_whitespace():
    assert strip_whitespace(" ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ  ‡∏ß‡∏±‡∏ô‡∏û‡∏∏‡∏ò ") == "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ‡∏ß‡∏±‡∏ô‡∏û‡∏∏‡∏ò"

def test_remove_commas():
    input = "20,000"
    output = "20000"
    assert remove_symbols(input) == output
    assert split_sentence(input) == ["‡∏™‡∏≠‡∏á‡∏´‡∏°‡∏∑‡πà‡∏ô"]

def test_strip_quotes():
    input = '"‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ß‡∏±‡∏ô‡∏û‡∏∏‡∏ò"'
    output = "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ß‡∏±‡∏ô‡∏û‡∏∏‡∏ò"
    assert remove_all_quotes(input) == output

def test_remove_emojis():
    input = "üå®‡∏Ñ‡∏ß‡∏µ‡∏ô‡∏ü‡πâ‡∏≤üëë"
    output = "‡∏Ñ‡∏ß‡∏µ‡∏ô‡∏ü‡πâ‡∏≤"

    assert remove_symbols(input) == output

def test_remove_pintu():
    input = "‡∏™‡∏∫‡∏ß‡∏≤‡∏Å‡∏∫‡∏Ç‡∏≤‡πÇ‡∏ï"

    assert is_sentence_valid(input) == False

def test_replace_percent():
    input = "‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡πâ‡∏≠‡∏¢%"
    output = "‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå"

    assert replace_percent(input) == output
    assert split_sentence(input) == [output]

def test_reject_three_repeating_letters():
    inputs = ["‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏∞‡∏™‡∏≤‡∏î‡∏î‡∏î‡πÑ‡∏õ‡πÑ‡∏´‡∏ô", '‡∏ï‡∏≤‡πÄ‡∏ã‡∏ô‡∏ô‡∏ô‡∏à‡∏µ‡∏ö‡πÉ‡∏Ñ‡∏£‡∏ô‡πä‡∏≠']

    for i in inputs:
        assert is_sentence_valid(i) == False

def test_replace_time():
    input = "‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÄ‡∏ß‡∏•‡∏≤ 11.00-22.00 ‡∏ô."
    output = "‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÄ‡∏ß‡∏•‡∏≤ ‡∏™‡∏¥‡∏ö‡πÄ‡∏≠‡πá‡∏î‡∏à‡∏∏‡∏î‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ñ‡∏∂‡∏á‡∏¢‡∏µ‡πà‡∏™‡∏¥‡∏ö‡∏™‡∏≠‡∏á‡∏à‡∏∏‡∏î‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤"

    assert replace_time(input) == output

def test_valid_spellings():
    input = "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö"

    assert is_spelling_valid(input) == True

def test_invalid_spellings():
    input = "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Æ‡πä‡∏≤‡∏ü"

    assert is_spelling_valid(input) == False